package com.shustanov.lorimobile.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shustanov.lorimobile.data.timeentry.TimeEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIME_ENTRY".
*/
public class TimeEntryDao extends AbstractDao<TimeEntry, Void> {

    public static final String TABLENAME = "TIME_ENTRY";

    /**
     * Properties of entity TimeEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property TimeInHours = new Property(2, String.class, "timeInHours", false, "TIME_IN_HOURS");
        public final static Property TimeInMinutes = new Property(3, String.class, "timeInMinutes", false, "TIME_IN_MINUTES");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property TaskId = new Property(5, String.class, "taskId", false, "TASK_ID");
    }


    public TimeEntryDao(DaoConfig config) {
        super(config);
    }
    
    public TimeEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIME_ENTRY\" (" + //
                "\"ID\" TEXT UNIQUE ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"TIME_IN_HOURS\" TEXT," + // 2: timeInHours
                "\"TIME_IN_MINUTES\" TEXT," + // 3: timeInMinutes
                "\"STATUS\" TEXT," + // 4: status
                "\"TASK_ID\" TEXT);"); // 5: taskId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIME_ENTRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TimeEntry entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String timeInHours = entity.getTimeInHours();
        if (timeInHours != null) {
            stmt.bindString(3, timeInHours);
        }
 
        String timeInMinutes = entity.getTimeInMinutes();
        if (timeInMinutes != null) {
            stmt.bindString(4, timeInMinutes);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(6, taskId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TimeEntry entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String timeInHours = entity.getTimeInHours();
        if (timeInHours != null) {
            stmt.bindString(3, timeInHours);
        }
 
        String timeInMinutes = entity.getTimeInMinutes();
        if (timeInMinutes != null) {
            stmt.bindString(4, timeInMinutes);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(6, taskId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TimeEntry readEntity(Cursor cursor, int offset) {
        TimeEntry entity = new TimeEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // timeInHours
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // timeInMinutes
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // taskId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TimeEntry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTimeInHours(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeInMinutes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTaskId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TimeEntry entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TimeEntry entity) {
        return null;
    }

    @Override
    public boolean hasKey(TimeEntry entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
